# Copyright 2013-2020 Lawrence Livermore National Security, LLC and other
# Spack Project Developers. See the top-level COPYRIGHT file for details.
#
# SPDX-License-Identifier: (Apache-2.0 OR MIT)

import platform
import sys
import os
from spack import *


class Namd(MakefilePackage):
    """NAMDis a parallel molecular dynamics code designed for
    high-performance simulation of large biomolecular systems."""

    homepage = "http://www.ks.uiuc.edu/Research/namd/"
    url      = "file://{0}/NAMD_2.14b2_Source.tar.gz".format(os.getcwd())
    manual_download = True

    version('2.14', '34044d85d9b4ae61650ccdba5cda4794088c3a9075932392dd0752ef8c049235')
    version('2.14b2', 'cb4bd918d2d545bb618e4b4a20023a53916f0aa362d9e57f3de1562c36240b00')
    version('2.13', '9e3323ed856e36e34d5c17a7b0341e38')
    version('2.12', '2a1191909b1ab03bf0205971ad4d8ee9')

    variant('fftw', default='3', values=('none', '2', '3', 'mkl'),
            description='Enable the use of FFTW/FFTW3/MKL FFT')

    variant('cuda', default=False, description='Enable build of gpu exe')

    variant('interface', default='none', values=('none', 'tcl', 'python'),
            description='Enables TCL and/or python interface')

    depends_on('charmpp')

    depends_on('fftw@:2.99', when="fftw=2")
    depends_on('fftw@3:', when="fftw=3")

    depends_on('intel-mkl', when="fftw=mkl")

    depends_on('tcl', when='interface=tcl')

    depends_on('tcl', when='interface=python')
    depends_on('python', when='interface=python')

    depends_on('cuda',when='+cuda')

    def _copy_arch_file(self, lib):
        config_filename = 'arch/{0}.{1}'.format(self.arch, lib)
        copy('arch/Linux-x86_64.{0}'.format(lib),
             config_filename)
        if lib == 'tcl':
            filter_file(r'-ltcl8\.5',
                        '-ltcl{0}'.format(self.spec['tcl'].version.up_to(2)),
                        config_filename)

    def _append_option(self, opts, lib):
        if lib != 'python':
            self._copy_arch_file(lib)
        spec = self.spec
        opts.extend([
            '--with-{0}'.format(lib),
            '--{0}-prefix'.format(lib), spec[lib].prefix
        ])

    @property
    def arch(self):
        plat = sys.platform
        if plat.startswith("linux"):
            plat = "linux"
        march = platform.machine()
        return '{0}-{1}'.format(plat, march)

    @property
    def build_directory(self):
        return '{0}-spack'.format(self.arch)

    def edit(self, spec, prefix):
        with working_dir('arch'):
            with open('{0}.arch'.format(self.build_directory), 'w') as fh:
                # this options are take from the default provided
                # configuration files
                optims_opts = {
                    'gcc': '-m64 -O3 -fexpensive-optimizations -ffast-math',
                    'intel': '-O2 -ip'
                }

                optim_opts = optims_opts[self.compiler.name] \
                    if self.compiler.name in optims_opts else ''

                fftw_include_extra=''
                if 'fftw=mkl' in self.spec:
                    fftw_include_extra='-I'+join_path(spec['intel-mkl'].prefix,'mkl','include','fftw')
                fh.write('\n'.join([
                    'NAMD_ARCH = {0}'.format(self.arch),
                    'CHARMARCH = ',
                    'CXX = {0.cxx} {0.cxx11_flag}'.format(
                        self.compiler),
                    'CXXOPTS = {0}'.format(optim_opts) + ' ' + fftw_include_extra,
                    'CC = {0}'.format(self.compiler.cc),
                    'COPTS = {0}'.format(optim_opts) + ' ' + fftw_include_extra,
                    ''
                ]))

        self._copy_arch_file('base')

        opts = ['--charm-base', spec['charmpp'].prefix]
        fftw_version = spec.variants['fftw'].value
        if fftw_version == 'none':
            opts.append('--without-fftw')
        elif fftw_version == 'mkl':
            self._append_option(opts, 'mkl')
        else:
            _fftw = 'fftw{0}'.format('' if fftw_version == '2' else '3')

            self._copy_arch_file(_fftw)
            opts.extend(['--with-{0}'.format(_fftw),
                         '--fftw-prefix', spec['fftw'].prefix])

        interface_type = spec.variants['interface'].value
        if interface_type != 'none':
            self._append_option(opts, 'tcl')

            if interface_type == 'python':
                self._append_option(opts, 'python')
        else:
            opts.extend([
                '--without-tcl',
                '--without-python'
            ])


        if '+cuda' in spec:
            opts.extend([
                '--with-cuda',
                '--cuda-prefix',
                spec['cuda'].prefix
            ])
            filter_file('charm_arch_smp=0','charm_arch_smp=1','config')
            with working_dir('arch'):
                with open('{0}.cuda'.format(self.arch), 'w') as fh:
                    fh.write('\n'.join([
                        'CUDADIR = {0}'.format(spec['cuda'].prefix),
                        'CUDAINCL = -I{0}/include'.format(spec['cuda'].prefix),
                        'CUBDIR =  {0}/cub'.format(self.stage.source_path),
                        'CUBINCL = -I$(CUBDIR)',
                        'CUDALIB =  -L$(CUDADIR)/lib64 -lcufft_static -lculibos -lcudart_static -lrt',
                        'CUDASODIR = $(CUDADIR)/lib64',
                        'LIBCUDARTSO=',
                        'CUDAFLAGS=-DNAMD_CUDA',
                        'CUDAOBJS=$(CUDAOBJSRAWSTATIC)',
                        'CUDA=$(CUDAFLAGS) -I. $(CUDAINCL) $(CUBINCL)',
                        'CUDACC=$(CUDADIR)/bin/nvcc -Xcompiler "-m64"',
                        'CUDACCOPTS=-O3 --maxrregcount 48 $(CUDAGENCODE) $(CUDA)',
                        'CUDAGENCODE=-gencode arch=compute_30,code=sm_30 -gencode arch=compute_30,code=compute_30 -gencode arch=compute_35,code=sm_35 -gencode arch=compute_35,code=compute_35 -gencode arch=compute_37,code=sm_37 -gencode arch=compute_37,code=compute_37 -gencode arch=compute_52,code=sm_52 -gencode arch=compute_52,code=compute_52 -gencode arch=compute_60,code=sm_60 -gencode arch=compute_60,code=compute_60 -gencode arch=compute_61,code=sm_61 -gencode arch=compute_61,code=compute_61 -gencode arch=compute_70,code=sm_70 -gencode arch=compute_70,code=compute_70 -gencode arch=compute_75,code=sm_75 -gencode arch=compute_75,code=compute_75',
                        'CUDACCOPTS=-O3 --maxrregcount 48 $(CUDAGENCODE) $(CUDA)',
                        ''
                    ]))

        if 'backend=mpi' in spec['charmpp']:
            filter_file(r'^EXTRALINKLIBS=$','EXTRALINKLIBS=-lpthread','Makefile')
        with open('/tmp/o','w') as fp:
            for opt in opts:
                print(opt,file=fp)
        config = Executable('./config')

        config(self.build_directory, *opts)

    def setup_build_environment(self, env):
        if 'backend=mpi' in self.spec['charmpp']:
            env.set('MPICC', 'mpicc')
            env.set('MPICXX', 'mpicxx')
            env.set('MPIF90', 'mpif90')
            env.set('MPIF77', 'mpif77')
            env.set('MPIFC', 'mpifc')
      
    def install(self, spec, prefix):
        with working_dir(self.build_directory):
            mkdirp(prefix.bin)
            install('namd2', prefix.bin)

            # I'm not sure this is a good idea or if an autoload of the charm
            # module would not be better.
            install('charmrun', prefix.bin)
